{#
@BoxalinoRealTimeUserExperienceIntegration/storefront/narrative/component/product/listing-fallback.html.twig

the product-listing-row segment of the original Shopware6 theme file
(@Storefront/storefront/component/product/listing.html.twig)

block.getModel().getItem(id) : uses the block model (ex: Boxalino\RealTimeUserExperience\Framework\Content\Listing\ApiEntityCollectionModel)
to set a product entity from the collection of products (as returned by the Boxalino response)
the child block (of type product) is being rendered with minimum changes

optional: use the JSON SCHEMA of the product layout block to set other params (layout, displayMode, etc)
#}
{% block element_product_listing_row %}
    {#
    relevant in the case of search with subphrases matches
    #}
    <div><h3>{{ block.title }}</h3> <a href="{{ block.see_all_link }}"><h5>{{ block.see_all_label }}</h5></a></div>

    <div class="row cms-listing-row js-listing-wrapper {{ block.getBxAttributes().getClass() }}"
    {% for bxAttribute in block.getBxAttributes() %}
        {{ bxAttribute.getName() }}="{{ bxAttribute.getValue() }}"
    {% endfor %}
    >
    {% block element_product_listing_col %}
        {% for bxblock in block.blocks %}
            {#
            when using default shopware product templates, the following properties are required:
            layout
            displayMode
            product
            listingColumns
            #}
            {% set narrativeContent ={
                'block' : bxblock,
                'layout': bxblock.layout[0],
                'displayMode': bxblock.displayMode[0],
                'listingColumns' : listingColumns
            } %}
            {% set productByGroupId = block.getModel().getItem(bxblock.bxHit.products_group_id[0]) %}
            {% if product %}
                {% set narrativeContent = narrativeContent|merge({ 'product': productByGroupId }) %}
                {% sw_include bxblock.template with narrativeContent %}
            {% else %}
                {% set productById = block.getModel().getItemById(bxblock.bxHit.id) %}
                {% if productById %}
                    {% set narrativeContent = narrativeContent|merge({ 'product': productById }) %}
                    {% sw_include bxblock.template with narrativeContent %}
                {% else %}
                    {# in case the content in the listing is not only product but some other type (custom) #}
                    {% set narrativeContent = {'block' : bxblock } %}
                    {% sw_include bxblock.template with narrativeContent %}
                {% endif %}
            {% endif %}
        {% endfor %}
    {% endblock %}
    </div>
{% endblock %}

